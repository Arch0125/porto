/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DialogImport } from './routes/_dialog'
import { Route as IndexImport } from './routes/index'
import { Route as DialogDialogWalletconnectImport } from './routes/_dialog.dialog/wallet_connect'
import { Route as DialogDialogExperimentalauthorizeKeyImport } from './routes/_dialog.dialog/experimental_authorizeKey'
import { Route as DialogDialogSplatImport } from './routes/_dialog.dialog/$'

// Create/Update Routes

const DialogRoute = DialogImport.update({
  id: '/_dialog',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DialogDialogWalletconnectRoute = DialogDialogWalletconnectImport.update({
  id: '/dialog/wallet_connect',
  path: '/dialog/wallet_connect',
  getParentRoute: () => DialogRoute,
} as any)

const DialogDialogExperimentalauthorizeKeyRoute =
  DialogDialogExperimentalauthorizeKeyImport.update({
    id: '/dialog/experimental_authorizeKey',
    path: '/dialog/experimental_authorizeKey',
    getParentRoute: () => DialogRoute,
  } as any)

const DialogDialogSplatRoute = DialogDialogSplatImport.update({
  id: '/dialog/$',
  path: '/dialog/$',
  getParentRoute: () => DialogRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_dialog': {
      id: '/_dialog'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DialogImport
      parentRoute: typeof rootRoute
    }
    '/_dialog/dialog/$': {
      id: '/_dialog/dialog/$'
      path: '/dialog/$'
      fullPath: '/dialog/$'
      preLoaderRoute: typeof DialogDialogSplatImport
      parentRoute: typeof DialogImport
    }
    '/_dialog/dialog/experimental_authorizeKey': {
      id: '/_dialog/dialog/experimental_authorizeKey'
      path: '/dialog/experimental_authorizeKey'
      fullPath: '/dialog/experimental_authorizeKey'
      preLoaderRoute: typeof DialogDialogExperimentalauthorizeKeyImport
      parentRoute: typeof DialogImport
    }
    '/_dialog/dialog/wallet_connect': {
      id: '/_dialog/dialog/wallet_connect'
      path: '/dialog/wallet_connect'
      fullPath: '/dialog/wallet_connect'
      preLoaderRoute: typeof DialogDialogWalletconnectImport
      parentRoute: typeof DialogImport
    }
  }
}

// Create and export the route tree

interface DialogRouteChildren {
  DialogDialogSplatRoute: typeof DialogDialogSplatRoute
  DialogDialogExperimentalauthorizeKeyRoute: typeof DialogDialogExperimentalauthorizeKeyRoute
  DialogDialogWalletconnectRoute: typeof DialogDialogWalletconnectRoute
}

const DialogRouteChildren: DialogRouteChildren = {
  DialogDialogSplatRoute: DialogDialogSplatRoute,
  DialogDialogExperimentalauthorizeKeyRoute:
    DialogDialogExperimentalauthorizeKeyRoute,
  DialogDialogWalletconnectRoute: DialogDialogWalletconnectRoute,
}

const DialogRouteWithChildren =
  DialogRoute._addFileChildren(DialogRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof DialogRouteWithChildren
  '/dialog/$': typeof DialogDialogSplatRoute
  '/dialog/experimental_authorizeKey': typeof DialogDialogExperimentalauthorizeKeyRoute
  '/dialog/wallet_connect': typeof DialogDialogWalletconnectRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof DialogRouteWithChildren
  '/dialog/$': typeof DialogDialogSplatRoute
  '/dialog/experimental_authorizeKey': typeof DialogDialogExperimentalauthorizeKeyRoute
  '/dialog/wallet_connect': typeof DialogDialogWalletconnectRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_dialog': typeof DialogRouteWithChildren
  '/_dialog/dialog/$': typeof DialogDialogSplatRoute
  '/_dialog/dialog/experimental_authorizeKey': typeof DialogDialogExperimentalauthorizeKeyRoute
  '/_dialog/dialog/wallet_connect': typeof DialogDialogWalletconnectRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/dialog/$'
    | '/dialog/experimental_authorizeKey'
    | '/dialog/wallet_connect'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/dialog/$'
    | '/dialog/experimental_authorizeKey'
    | '/dialog/wallet_connect'
  id:
    | '__root__'
    | '/'
    | '/_dialog'
    | '/_dialog/dialog/$'
    | '/_dialog/dialog/experimental_authorizeKey'
    | '/_dialog/dialog/wallet_connect'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DialogRoute: typeof DialogRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DialogRoute: DialogRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_dialog"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_dialog": {
      "filePath": "_dialog.tsx",
      "children": [
        "/_dialog/dialog/$",
        "/_dialog/dialog/experimental_authorizeKey",
        "/_dialog/dialog/wallet_connect"
      ]
    },
    "/_dialog/dialog/$": {
      "filePath": "_dialog.dialog/$.tsx",
      "parent": "/_dialog"
    },
    "/_dialog/dialog/experimental_authorizeKey": {
      "filePath": "_dialog.dialog/experimental_authorizeKey.tsx",
      "parent": "/_dialog"
    },
    "/_dialog/dialog/wallet_connect": {
      "filePath": "_dialog.dialog/wallet_connect.tsx",
      "parent": "/_dialog"
    }
  }
}
ROUTE_MANIFEST_END */
